{"/home/travis/build/npmtest/node-npmtest-flatten-packages/test.js":"/* istanbul instrument in package npmtest_flatten_packages */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-flatten-packages/lib.npmtest_flatten_packages.js":"/* istanbul instrument in package npmtest_flatten_packages */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_flatten_packages = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_flatten_packages = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-flatten-packages/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-flatten-packages && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_flatten_packages */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_flatten_packages\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_flatten_packages.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_flatten_packages.rollup.js'] =\n            local.assetsDict['/assets.npmtest_flatten_packages.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_flatten_packages.__dirname + '/lib.npmtest_flatten_packages.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-flatten-packages/node_modules/flatten-packages/index.js":"module.exports = require('./lib/flatten')","/home/travis/build/npmtest/node-npmtest-flatten-packages/node_modules/flatten-packages/lib/flatten.js":"'use strict';\r\n\r\nvar fs = require('fs');\r\nvar path = require('path');\r\n\r\nvar semver = require('semver');\r\nvar colors = require('colors');\r\nvar wrench = require('wrench');\r\n\r\n/**\r\n * Flatten node_modules\r\n * \r\n * Get all package.json, find and delete duplicates\r\n *\r\n * @param {String} dir Directory name\r\n * @param {Object} options Options available: info and verbose. verbose is always true \r\n * @param {Function} callback return status\r\n */\r\nmodule.exports = function(dir, options, callback) {\r\n  \r\n  options.verbose = true;\r\n\r\n  var resolvedDir = path.resolve(dir);\r\n\r\n  if (options.verbose) {\r\n    console.log('processing directory ' + resolvedDir.green);\r\n  }\r\n  \r\n  if (fs.existsSync(resolvedDir)) {\r\n\r\n    // find modules\r\n    walkModules(resolvedDir, function(err, modules) {\r\n      if (err) return callback(err);\r\n      else {\r\n        \r\n        if (options.verbose) {\r\n          console.log('there are', colors.cyan(modules.length), 'total packages');\r\n        }\r\n\r\n        var seenData = [];\r\n        var duplicateData = [];\r\n        var moduleCount = {};\r\n        \r\n        // for each package\r\n        for (var i = 0; i < modules.length; i++) {\r\n\r\n          // get package information\r\n          var currentData = {};\r\n          currentData.dir = path.dirname(modules[i]);\r\n          currentData.dirname = path.basename(currentData.dir);\r\n\r\n          var occurence = countOccurence(currentData.dir.split(path.sep));\r\n          currentData.nodeModulesCount = occurence.node_modules;\r\n          moduleCount[currentData.nodeModulesCount] = (moduleCount[currentData.nodeModulesCount] || 0) + 1\r\n\r\n          try {\r\n            var packageJson = require(modules[i]);\r\n            currentData.name = packageJson.name || currentData.dirname;\r\n            currentData.version = packageJson.version || '0.0.0';\r\n            if(typeof(currentData.name) === 'undefined')\r\n              continue;\r\n              //throw 'Name is not specified in ' + modules[i];\r\n            if(typeof(currentData.version) === 'undefined')\r\n              continue;\r\n              //throw 'Version is not specified in ' + modules[i];\r\n          }\r\n          catch(err) {\r\n            return callback(err);\r\n          }\r\n\r\n          console.log('processing ' + currentData.name + ' ver. ' + currentData.version + ' in ' + currentData.dir);\r\n\r\n          // start acculumate seen and duplicate\r\n          if (seenData.length == 0) {\r\n            seenData.push(currentData);\r\n          }\r\n          else {\r\n\r\n            var currentExist = false;\r\n            var currentExistIndex = -1;\r\n            var currentExistData = {};\r\n            for (var j = 0; j < seenData.length; j++) {\r\n\r\n              if (seenData[j].name === currentData.name) {\r\n                currentExist = true;\r\n                currentExistIndex = j;\r\n                currentExistData = seenData[j];\r\n                break;\r\n              }\r\n            }\r\n\r\n            if (!currentExist) {\r\n              seenData.push(currentData);\r\n            }\r\n            else {\r\n              if (options.verbose) {\r\n                console.log(' duplicate:'.magenta, currentData.name, currentData.version.cyan, 'existing version:', currentExistData.version.cyan);\r\n              }\r\n\r\n              // if seen version is older, swap seen with most current version\r\n              if (semver.lt(currentExistData.version,currentData.version)) {\r\n                if (options.verbose) {\r\n                  console.log('  ', currentData.name, 'existing version is older. do swap');\r\n                }\r\n                seenData[currentExistIndex] = currentData;\r\n                duplicateData.push(currentExistData);\r\n              }\r\n              else {\r\n                duplicateData.push(currentData);  \r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if (options.verbose) {\r\n          console.log('node_modules iteration complete'.green);\r\n          console.log('there are', colors.cyan(seenData.length), 'unique packages');\r\n          console.log('         ', colors.cyan(duplicateData.length), 'duplicate packages');\r\n          for (var key in moduleCount) {\r\n            var str = key == 1 ? 'there are' : '         ';\r\n            console.log(str, colors.cyan(moduleCount[key]), 'packages in node_modules level', colors.cyan(key));\r\n          }\r\n        }\r\n\r\n        if (options.info) {\r\n          callback(null, 'node_modules info complete'.green);  \r\n        }\r\n        else {\r\n\r\n          try {\r\n\r\n            // move seen packages if its in deeper level to first level\r\n            for (var k = 0; k < seenData.length; k++) {\r\n              if (seenData[k].nodeModulesCount > 1) {\r\n                if (options.verbose) {\r\n                  var copyDestination = path.join(resolvedDir, 'node_modules', seenData[k].dirname);\r\n                  console.log('moving directory'.cyan, seenData[k].dir, 'to'.cyan, copyDestination);\r\n                  wrench.copyDirSyncRecursive(seenData[k].dir, copyDestination, { forceDelete: true });\r\n                }\r\n              }\r\n            }\r\n\r\n            // re-walk the node_modules and delete all node_modules in deeper level\r\n            var nodeModulesDir = path.join(resolvedDir, 'node_modules');\r\n            fs.readdir(nodeModulesDir, function(err, list) {\r\n              if (err) {\r\n                callback(err);\r\n              }\r\n              else {\r\n                list.forEach(function(file) {\r\n                  file = path.join(resolvedDir, 'node_modules', file);\r\n                  var stat = fs.statSync(file);\r\n                  if (stat && stat.isDirectory()) {\r\n                    var deeperNodeModulesDir = path.join(file, 'node_modules');\r\n                    if (fs.existsSync(deeperNodeModulesDir)) {\r\n                      if (options.verbose) {\r\n                        console.log('deleting directory'.magenta, deeperNodeModulesDir);\r\n                      }\r\n                      wrench.rmdirSyncRecursive(deeperNodeModulesDir, true);\r\n                    }\r\n                  }\r\n                })\r\n\r\n                callback(null, 'flatten node_modules complete'.green);\r\n              }\r\n            })\r\n          }\r\n          catch(err) {\r\n            callback(err);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n  else {\r\n    callback(new Error('Specified directory ' + dir + ' is not exists!'))\r\n  }\r\n}\r\n\r\n/**\r\n * Walk module folder\r\n *\r\n * Find folder node_modules, scan its folders, find package.json and store it, recursively\r\n * \r\n * @param {String} dir Directory name\r\n * @param {Function} done this will contains array of package.json file\r\n */\r\nfunction walkModules(dir, done) {\r\n\r\n  var results = [];\r\n\r\n  fs.readdir(dir, function(err, list) {\r\n    if (err) return done(err);\r\n    var pending = list.length;\r\n    if (!pending) return done(null, results);\r\n\r\n    list.forEach(function(file) {\r\n      file = dir + path.sep + file;\r\n\r\n      fs.stat(file, function(err, stat) {\r\n        if (stat && stat.isDirectory()) {\r\n\r\n          if (file.indexOf('node_modules') > -1) {\r\n            walkModules(file, function(err, res) {\r\n              results = results.concat(res);\r\n              if (!--pending) done(null, results);\r\n            });\r\n          }\r\n          else {\r\n            if (!--pending) done(null, results);\r\n          }\r\n\r\n        } else {\r\n\r\n          if (file.slice(-12) === 'package.json') {\r\n            var parts = file.split(path.sep);\r\n            if (parts[parts.length-3] === 'node_modules') {\r\n              results.push(file);\r\n            }\r\n          }\r\n          \r\n          if (!--pending) done(null, results);\r\n        }\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Count occurance in array\r\n * \r\n * @param {Array} arr Array of items\r\n */\r\nfunction countOccurence(arr) {\r\n  var obj = { };\r\n  for (var i = 0, j = arr.length; i < j; i++) {\r\n    obj[arr[i]] = (obj[arr[i]] || 0) + 1\r\n  }\r\n  return obj;\r\n}","/home/travis/build/npmtest/node-npmtest-flatten-packages/node_modules/flatten-packages/lib/print.js":"'use strict';\r\n\r\nvar fs = require('fs');\r\nvar path = require('path');\r\n\r\nvar colors = require('colors');\r\n\r\n/**\r\n * Print first level node_modules\r\n *\r\n * @param {String} dir Directory name\r\n * @param {Function} callback return status\r\n */\r\nmodule.exports = function(dir, callback) {\r\n\r\n  var resolvedDir = path.resolve(dir);\r\n\r\n  var nodeModulesDir = path.join(resolvedDir, 'node_modules');\r\n  console.log(nodeModulesDir);\r\n  fs.readdir(nodeModulesDir, function(err, list) {\r\n    if (err) {\r\n      callback(err);\r\n    }\r\n    else {\r\n      \r\n      var dependencies = {};\r\n      list.forEach(function(file) {\r\n        file = path.join(resolvedDir, 'node_modules', file, 'package.json');\r\n        if (fs.existsSync(file)) {\r\n          var packageJson = require(file);\r\n          dependencies[packageJson.name] = packageJson.version;\r\n        }\r\n      })\r\n\r\n      var d = {\r\n        dependencies : dependencies\r\n      }\r\n      console.log(JSON.stringify(d, null, 2));\r\n\r\n      callback(null, 'print node_modules complete'.green);\r\n    }\r\n  })\r\n}"}